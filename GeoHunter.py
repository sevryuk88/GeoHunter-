import os
import random
import math
import logging
import json  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
from datetime import datetime, date, timedelta
from dotenv import load_dotenv
from telegram import (
    Update,
    WebAppInfo, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    CommandHandler, 
    MessageHandler, 
    CallbackContext,
    CallbackQueryHandler,
    filters
)
from geopy.distance import geodesic

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
ADMIN_ID = os.getenv('ADMIN_ID', '0')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ========== –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ê–Ø –°–ò–°–¢–ï–ú–ê ==========
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∂–∏–º–æ–≤
GAME_MODES = {
    'economy': {
        'name': 'üü¢ –≠–∫–æ–Ω–æ–º',
        'entry_fee': 5,
        'min_prize': 3,
        'max_prize': 30,
        'win_probability': 0.08,  # 8%
        'prize_distribution': {
            3: 0.75,    # 75% chance
            5: 0.15,    # 15% chance
            10: 0.07,   # 7% chance
            30: 0.03    # 3% chance
        }
    },
    'standard': {
        'name': 'üîµ –°—Ç–∞–Ω–¥–∞—Ä—Ç',
        'entry_fee': 10,
        'min_prize': 5,
        'max_prize': 50,
        'win_probability': 0.15,  # 15%
        'prize_distribution': {
            5: 0.55,    # 55% chance
            10: 0.25,   # 25% chance
            20: 0.15,   # 15% chance
            50: 0.05    # 5% chance
        }
    },
    'premium': {
        'name': 'üü£ –ü—Ä–µ–º–∏—É–º',
        'entry_fee': 15,
        'min_prize': 10,
        'max_prize': 100,
        'win_probability': 0.22,  # 22%
        'prize_distribution': {
            10: 0.50,   # 50% chance
            15: 0.25,   # 25% chance
            25: 0.15,   # 15% chance
            50: 0.07,   # 7% chance
            100: 0.03   # 3% chance
        }
    }
}

# –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫–æ–Ω–æ–º–∏–∫–∏
HOUSE_EDGE = 0.12        # –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –∫–∞–∑–∏–Ω–æ (12%)
JACKPOT_CONTRIBUTION = 0.02  # –í–∑–Ω–æ—Å –≤ –¥–∂–µ–∫–ø–æ—Ç (2%)
JACKPOT_PROBABILITY = 0.0005  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä—ã—à–∞ –¥–∂–µ–∫–ø–æ—Ç–∞ (0.05%)


WIN_MESSAGES = [
    "üéâ –£—Ä–∞! –¢—ã –Ω–∞—à–µ–ª –≥–µ–æ–º–µ—Ç–∫—É —Å –ø—Ä–∏–∑–æ–º! üéâ",
    "üí∞ –í–æ—Ç —ç—Ç–æ —É–¥–∞—á–∞! –ì–µ–æ–º–µ—Ç–∫–∞ –ø—Ä–∏–Ω–µ—Å–ª–∞ —Ç–µ–±–µ {prize} —Ä—É–±.!",
    "ü§ë –ù–∞—à–µ–ª –∫–ª–∞–¥! –ó–∞–±–∏—Ä–∞–π {prize} —Ä—É–±.!",
    "‚ú® –ë–∏–Ω–≥–æ! –¢—ã –Ω–∞—à–µ–ª {prize} —Ä—É–±. –≤ –≥–µ–æ–º–µ—Ç–∫–µ!",
    "üíé –û–≥–æ! –ì–µ–æ–º–µ—Ç–∫–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å —Å —Å—é—Ä–ø—Ä–∏–∑–æ–º: {prize} —Ä—É–±.!"
]

EMPTY_MESSAGES = [
    "üîç –¢—ã –Ω–∞—à–µ–ª –≥–µ–æ–º–µ—Ç–∫—É, –Ω–æ –æ–Ω–∞ –ø—É—Å—Ç–∞—è.",
    "ü§∑‚Äç‚ôÇÔ∏è –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, —ç—Ç–∞ –º–µ—Ç–∫–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –ø—É—Å—Ç–æ–π. –ò—â–∏ —Å–ª–µ–¥—É—é—â—É—é!",
    "üí® –ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ. –ú–µ—Ç–∫–∞ –ø—É—Å—Ç–∞—è, –Ω–æ —É–¥–∞—á–∞ —É–∂–µ –±–ª–∏–∑–∫–æ!",
    "üå´Ô∏è –≠—Ö, —ç—Ç–∞ –≥–µ–æ–º–µ—Ç–∫–∞ –ø—É—Å—Ç–∞—è. –ù–µ —Å–¥–∞–≤–∞–π—Å—è!",
    "‚ùå –ü—É—Å—Ç–æ... –ù–æ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ–∑–µ—Ç!"
]

JACKPOT_MESSAGES = [
    "üé∞ üé∞ üé∞ –î–ñ–ï–ö–ü–û–¢! üé∞ üé∞ üé∞\n\nüíé –í–´ –í–´–ò–ì–†–ê–õ–ò –ì–õ–ê–í–ù–´–ô –ü–†–ò–ó: {prize} —Ä—É–±.! üíé",
    "üî• –ù–ï–í–ï–†–û–Ø–¢–ù–û! –î–ñ–ï–ö–ü–û–¢ {prize} —Ä—É–±.! üî•\n\n–≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∞—è —É–¥–∞—á–∞!",
    "üèÜ –ü–û–ë–ï–î–ê! –¢—ã —Å–æ—Ä–≤–∞–ª –¥–∂–µ–∫–ø–æ—Ç –≤ {prize} —Ä—É–±.! üèÜ\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
]

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞
class DynamicEconomy:
    def __init__(self):
        self.total_games = 0
        self.total_profit = 0
        self.win_rate_history = []
        
    def adjust_difficulty(self, base_probability):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if len(self.win_rate_history) < 10:
            return base_probability
            
        avg_win_rate = sum(self.win_rate_history) / len(self.win_rate_history)
        
        # –†–µ–≥—É–ª–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
        if avg_win_rate > base_probability * 1.2:  # –ï—Å–ª–∏ –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
            return max(base_probability * 0.7, base_probability * 0.9)  # –£–º–µ–Ω—å—à–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        elif avg_win_rate < base_probability * 0.8:  # –ï—Å–ª–∏ –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç —Å–ª–∏—à–∫–æ–º —Ä–µ–¥–∫–æ
            return min(base_probability * 1.3, base_probability * 1.1)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        return base_probability

# –î–∂–µ–∫–ø–æ—Ç —Å–∏—Å—Ç–µ–º–∞
JACKPOT_POOL = 100  # –ù–∞—á–∞–ª—å–Ω—ã–π –¥–∂–µ–∫–ø–æ—Ç

# –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
USER_LEVELS = {
    1: {"xp_required": 0, "reward": 0, "title": "–ù–æ–≤–∏—á–æ–∫"},
    2: {"xp_required": 100, "reward": 5, "title": "–ò—Å–∫–∞—Ç–µ–ª—å"},
    3: {"xp_required": 300, "reward": 10, "title": "–û—Ö–æ—Ç–Ω–∏–∫"},
    4: {"xp_required": 600, "reward": 20, "title": "–ú–∞—Å—Ç–µ—Ä"},
    5: {"xp_required": 1000, "reward": 50, "title": "–õ–µ–≥–µ–Ω–¥–∞"}
}

# –û–ø—ã—Ç –∑–∞ –¥–µ–π—Å—Ç–≤–∏—è
XP_PER_GAME = 5
XP_PER_WIN = 15

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∏–≥—Ä—ã
RESPONSIBLE_GAMING_LIMITS = {
    'daily_deposit_limit': 1000,
    'daily_games_limit': 20,
    'cooling_off_period': 24
}

# ========== –ë–ê–ó–´ –î–ê–ù–ù–´–• ==========
games = {}
user_balances = {}
transactions = {}
user_stats = {}
user_achievements = {}
user_referrals = {}
DAILY_STATS = {}
economy = DynamicEconomy()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
global_stats = {
    'total_games': 0,
    'total_deposits': 0,
    'total_prizes': 0,
    'total_revenue': 0,
    'jackpot_wins': 0,
    'active_players': set()
}

# ========== –ì–ï–û-–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
SEARCH_RADIUS = 30  # –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –º–µ—Ç—Ä–∞—Ö 100
MAX_DISTANCE = 10    # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏ 50
FIND_DISTANCE = 10   # –î–∏—Å—Ç–∞–Ω—Ü–∏—è –Ω–∞—Ö–æ–¥–∫–∏ 10
GPS_TOLERANCE = 20   # –ü–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å GPS –≤ –º–µ—Ç—Ä–∞—Ö 20
LIVE_LOCATION_DURATION = 600  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

class GeoGame:
    def __init__(self, user_id, center_lat, center_lon, game_mode):
        self.user_id = user_id
        self.center = (center_lat, center_lon)
        self.game_mode = game_mode
        self.mode_config = GAME_MODES[game_mode]
        self.geospots = self.generate_geospots()
        self.found_spots = []
        self.start_time = datetime.now()
        self.last_update = datetime.now()
        self.live_location_active = False
        self.last_proximity_check = {}
        logger.info(f"Created new {game_mode} game for user {user_id}")
        
    def generate_geospots(self, count=5):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –≥–µ–æ–º–µ—Ç–æ–∫ –≤ —Ä–∞–¥–∏—É—Å–µ"""
        spots = []
        current_win_probability = economy.adjust_difficulty(self.mode_config['win_probability'])
        
        logger.info(f"Generating spots with win probability: {current_win_probability}")
        
        
        for _ in range(count):
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            angle = random.uniform(0, 2 * math.pi)
            distance = random.uniform(0, SEARCH_RADIUS)
            
            earth_radius = 6371000
            dx = distance * math.cos(angle)
            dy = distance * math.sin(angle)
            
            delta_lat = dy / earth_radius * (180 / math.pi)
            delta_lon = dx / (earth_radius * math.cos(math.radians(self.center[0]))) * (180 / math.pi)
            
            new_lat = self.center[0] + delta_lat
            new_lon = self.center[1] + delta_lon
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—É–¥–µ—Ç –ª–∏ –ø—Ä–∏–∑
            has_prize = random.random() < current_win_probability
            prize_amount = self.generate_prize_amount() if has_prize else 0
            
            spots.append({
                'coords': (new_lat, new_lon),
                'has_prize': has_prize,
                'prize_amount': prize_amount,
                'found': False,
                'type': 'money' if has_prize else 'empty'
            })
            logger.info(f"Spot {_}: has_prize={has_prize}, amount={prize_amount}")
    
        
        return spots
    
    def generate_prize_amount(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–º–º—ã –ø—Ä–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è"""
        rand = random.random()
        cumulative = 0
        
        for prize, probability in self.mode_config['prize_distribution'].items():
            cumulative += probability
            if rand <= cumulative:
                return prize
        
        return self.mode_config['min_prize']  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def check_proximity(self, user_location):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ –≥–µ–æ–º–µ—Ç–∫–∞–º"""
        results = []
        user_lat, user_lon = user_location
        
        for i, spot in enumerate(self.geospots):
            if spot['found']:
                continue
                
            spot_lat, spot_lon = spot['coords']
            
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            horizontal_dist = geodesic(user_location, (spot_lat, spot_lon)).meters
            
            # –£—á–µ—Ç –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ GPS
            effective_dist = max(0, horizontal_dist - GPS_TOLERANCE)
            
            if effective_dist <= MAX_DISTANCE:
                progress = int((1 - effective_dist / MAX_DISTANCE) * 100)
                results.append({
                    'distance': effective_dist,
                    'progress': progress,
                    'spot': spot,
                    'is_close': effective_dist <= FIND_DISTANCE
                })
        
        return results

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def log_transaction(user_id: int, amount: int, transaction_type: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    if user_id not in transactions:
        transactions[user_id] = []
    
    transactions[user_id].append({
        'date': datetime.now().strftime("%Y-%m-%d %H:%M"),
        'amount': amount,
        'type': transaction_type
    })
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if amount > 0:
        global_stats['total_deposits'] += amount
    else:
        global_stats['total_prizes'] += abs(amount)
    
    global_stats['total_revenue'] = global_stats['total_deposits'] - global_stats['total_prizes']

def can_play_game(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–≥—Ä–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è"""
    today = date.today()
    if today not in DAILY_STATS:
        DAILY_STATS[today] = {}
    
    if user_id not in DAILY_STATS[today]:
        DAILY_STATS[today][user_id] = {'games_played': 0, 'amount_deposited': 0}
    
    return DAILY_STATS[today][user_id]['games_played'] < RESPONSIBLE_GAMING_LIMITS['daily_games_limit']

def log_game_played(user_id: int):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—ã–≥—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã"""
    today = date.today()
    if today not in DAILY_STATS:
        DAILY_STATS[today] = {}
    
    if user_id not in DAILY_STATS[today]:
        DAILY_STATS[today][user_id] = {'games_played': 0, 'amount_deposited': 0}
    
    DAILY_STATS[today][user_id]['games_played'] += 1

async def check_achievements(update: Update, context: CallbackContext, user_id: int, achievement_type: str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    if user_id not in user_achievements:
        user_achievements[user_id] = {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    if achievement_type == "first_win" and "first_win" not in user_achievements[user_id]:
        user_achievements[user_id]["first_win"] = True
        reward = 5
        
        user_balances[user_id] += reward
        log_transaction(user_id, reward, "achievement_reward")
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"üéñ –ü–æ–ª—É—á–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: –ü–µ—Ä–≤—ã–π –≤—ã–∏–≥—Ä—ã—à!\nüí∞ –ù–∞–≥—Ä–∞–¥–∞: {reward} —Ä—É–±."
        )

def generate_near_miss():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ '–ø–æ—á—Ç–∏ –≤—ã–∏–≥—Ä—ã—à–∞'"""
    if random.random() < 0.15:  # 15% —à–∞–Ω—Å near miss
        messages = [
            "–û–π! –í—ã –±—ã–ª–∏ —Ç–∞–∫ –±–ª–∏–∑–∫–∏ –∫ –≤—ã–∏–≥—Ä—ã—à—É! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!",
            "–ü–æ—á—Ç–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å! –°–ª–µ–¥—É—é—â–∞—è –º–µ—Ç–∫–∞ —Ç–æ—á–Ω–æ –±—É–¥–µ—Ç —É–¥–∞—á–Ω–æ–π!",
            "–£–¥–∞—á–∞ —É–∂–µ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–æ–∏—Å–∫–∏!"
        ]
        return random.choice(messages)
    return None

# ========== –ö–ù–û–ü–ö–ò ==========
def get_main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data='choose_mode')],
        [InlineKeyboardButton("üåé –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", web_app=WebAppInfo(url="https://sevryuk88.github.io/GeoHunter-/geohtml.html"))],
   
        [InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data='check_balance')],
        [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç", callback_data='make_deposit')],
        [InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data='invite_friends')],
        [InlineKeyboardButton("‚ùì –ü—Ä–∞–≤–∏–ª–∞", callback_data='show_rules')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='user_stats')],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_mode_selection_keyboard():
    keyboard = [
        [InlineKeyboardButton("üü¢ –≠–∫–æ–Ω–æ–º (5 —Ä—É–±.)", callback_data='mode_economy')],
        [InlineKeyboardButton("üîµ –°—Ç–∞–Ω–¥–∞—Ä—Ç (10 —Ä—É–±.)", callback_data='mode_standard')],
        [InlineKeyboardButton("üü£ –ü—Ä–µ–º–∏—É–º (15 —Ä—É–±.)", callback_data='mode_premium')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_game_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìç –í–∫–ª—é—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é", callback_data='start_live_location')],
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='user_stats')],
        [InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data='cancel_game')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_back_keyboard():
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_live_location_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìç –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é", callback_data='stop_live_location')],
        [InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='user_stats')],
        [InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data='cancel_game')],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_deposit_keyboard():
    keyboard = [
        [InlineKeyboardButton("15 —Ä—É–±.", callback_data='deposit_15')],
        [InlineKeyboardButton("50 —Ä—É–±. (+5 —Ä—É–±. –±–æ–Ω—É—Å)", callback_data='deposit_50')],
        [InlineKeyboardButton("100 —Ä—É–±. (+15 —Ä—É–±. –±–æ–Ω—É—Å)", callback_data='deposit_100')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='main_menu')],
    ]
    return InlineKeyboardMarkup(keyboard)

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========
async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user.id not in user_balances:
        user_balances[user.id] = 0
        user_stats[user.id] = {'level': 1, 'xp': 0, 'games_played': 0, 'prizes_won': 0}
    
    welcome_text = (
        "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GeoHunter! üåü\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Å–∫—Ä—ã—Ç—ã–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞ –≤–æ–∫—Ä—É–≥ —Ç–µ–±—è!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∏–≥—Ä—ã:\n"
        f"üü¢ –≠–∫–æ–Ω–æ–º: 5 —Ä—É–±. - –ø—Ä–∏–∑—ã 3-30 —Ä—É–±.\n"
        f"üîµ –°—Ç–∞–Ω–¥–∞—Ä—Ç: 10 —Ä—É–±. - –ø—Ä–∏–∑—ã 5-50 —Ä—É–±.\n"
        f"üü£ –ü—Ä–µ–º–∏—É–º: 15 —Ä—É–±. - –ø—Ä–∏–∑—ã 10-100 —Ä—É–±.\n\n"
        f"üíé –î–∂–µ–∫–ø–æ—Ç: {JACKPOT_POOL} —Ä—É–±. (—à–∞–Ω—Å {JACKPOT_PROBABILITY*100}%)\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=welcome_text,
        reply_markup=get_main_menu_keyboard()
    )

async def rules(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    rules_text = (
        "üìú –ü—Ä–∞–≤–∏–ª–∞ GeoHunter:\n\n"
        "1. –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏–≥—Ä—ã –∏ –≤–Ω–µ—Å–∏ –¥–µ–ø–æ–∑–∏—Ç\n"
        "2. –ó–∞–ø—É—Å—Ç–∏ –∏–≥—Ä—É, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é\n"
        "3. –Ø —Å–æ–∑–¥–∞–º 5 —Å–∫—Ä—ã—Ç—ã—Ö –≥–µ–æ–º–µ—Ç–æ–∫ –≤ —Ä–∞–¥–∏—É—Å–µ 100 –º\n"
        "4. –ü–µ—Ä–µ–º–µ—â–∞–π—Å—è –ø–æ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏ –∏—â–∏ –º–µ—Ç–∫–∏\n"
        "5. –ö–æ–≥–¥–∞ –ø—Ä–∏–±–ª–∏–∑–∏—à—å—Å—è –∫ –º–µ—Ç–∫–µ:\n"
        "   - üì± –¢–µ–ª–µ—Ñ–æ–Ω –Ω–∞—á–Ω–µ—Ç –≤–∏–±—Ä–∏—Ä–æ–≤–∞—Ç—å\n"
        "   - üîî –ü–æ—è–≤–∏—Ç—Å—è –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª\n"
        "   - üìä –®–∫–∞–ª–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –±–ª–∏–∑–æ—Å—Ç—å\n"
        "6. –ù–∞–π–¥–∏ –≤—Å–µ –º–µ—Ç–∫–∏ –∏ —Å–æ–±–µ—Ä–∏ –ø—Ä–∏–∑—ã!\n\n"
        "üî• –°–æ–≤–µ—Ç—ã:\n"
        "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–¢—Ä–∞–Ω—Å–ª—è—Ü–∏—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "- –ü—Ä–∏–±–ª–∏–∂–∞–π—Ç–µ—Å—å –∫ –º–µ—Ç–∫–∞–º –º–µ–¥–ª–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏—Ö\n\n"
        "–£–¥–∞—á–∏ –≤ –æ—Ö–æ—Ç–µ! üó∫Ô∏è"
    )
    
    await query.edit_message_text(rules_text, reply_markup=get_back_keyboard())

async def choose_mode(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    mode_text = (
        "üéÆ –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:\n\n"
        "üü¢ –≠–∫–æ–Ω–æ–º (5 —Ä—É–±.)\n"
        "   - –ü—Ä–∏–∑—ã: 3-30 —Ä—É–±.\n\n"   
        "üîµ –°—Ç–∞–Ω–¥–∞—Ä—Ç (10 —Ä—É–±.)\n"
        "   - –ü—Ä–∏–∑—ã: 5-50 —Ä—É–±.\n\n"   
        "üü£ –ü—Ä–µ–º–∏—É–º (15 —Ä—É–±.)\n"
        "   - –ü—Ä–∏–∑—ã: 10-100 —Ä—É–±.\n\n"   
        "üíé –í–æ –≤—Å–µ—Ö —Ä–µ–∂–∏–º–∞—Ö –µ—Å—Ç—å —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –¥–∂–µ–∫–ø–æ—Ç!"
    )
    
    await query.edit_message_text(mode_text, reply_markup=get_mode_selection_keyboard())

async def start_game(update: Update, context: CallbackContext, game_mode: str) -> None:
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    mode_config = GAME_MODES[game_mode]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if user.id not in user_balances or user_balances[user.id] < mode_config['entry_fee']:
        payment_text = (
            f"–î–ª—è –∏–≥—Ä—ã –≤ —Ä–µ–∂–∏–º–µ {mode_config['name']} —Ç—Ä–µ–±—É–µ—Ç—Å—è {mode_config['entry_fee']} —Ä—É–±.\n\n"
            f"–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏:\n"
            f"‚Ä¢ –ü—Ä–∏–∑—ã: {mode_config['min_prize']}-{mode_config['max_prize']} —Ä—É–±.\n"
            f"‚Ä¢ –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞: {int(mode_config['win_probability'] * 100)}%\n"
            f"‚Ä¢ –î–∂–µ–∫–ø–æ—Ç: {JACKPOT_POOL} —Ä—É–±.\n"
            f"‚Ä¢ 5 –≥–µ–æ–º–µ—Ç–æ–∫ –≤ —Ä–∞–¥–∏—É—Å–µ 100 –º\n\n"
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–¥–∞—á—É?"
        )
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –í–Ω–µ—Å—Ç–∏ –¥–µ–ø–æ–∑–∏—Ç", callback_data='make_deposit')],
            [InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data='check_balance')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='choose_mode')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(payment_text, reply_markup=reply_markup)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–≥—Ä
    if not can_play_game(user.id):
        limit_text = (
            f"‚ùå –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∏–≥—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({RESPONSIBLE_GAMING_LIMITS['daily_games_limit']} –∏–≥—Ä/–¥–µ–Ω—å).\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π,\n"
            "—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–≥—Ä—ã!"
        )
        await query.edit_message_text(limit_text, reply_markup=get_back_keyboard())
        return
    
    # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
    user_balances[user.id] -= mode_config['entry_fee']
    log_transaction(user.id, -mode_config['entry_fee'], f"game_entry_{game_mode}")
    log_game_played(user.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    global_stats['total_games'] += 1
    global_stats['active_players'].add(user.id)
    
    start_game_text = (
        f"–û—Ç–ª–∏—á–Ω–æ! –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º {mode_config['name']}\n"
        f"–° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ {mode_config['entry_fee']} —Ä—É–±.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –º–Ω–µ –Ω—É–∂–Ω–∞ —Ç–≤–æ—è —Ç–µ–∫—É—â–∞—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è. "
        "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏:"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìç –í–∫–ª—é—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é", callback_data='start_live_location')],
        [InlineKeyboardButton("üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data='send_location')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='choose_mode')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(start_game_text, reply_markup=reply_markup)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['selected_mode'] = game_mode

async def handle_deposit(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    deposit_text = (
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞:\n\n"
        "üíé –ü—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç 50 —Ä—É–±. - –±–æ–Ω—É—Å 5 —Ä—É–±.! \n"
        "üíé –ü—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç 100 —Ä—É–±. - –±–æ–Ω—É—Å 15 —Ä—É–±.!"
    )
    
    await query.edit_message_text(
        deposit_text,
        reply_markup=get_deposit_keyboard()
    )

async def process_deposit(update: Update, context: CallbackContext, amount: int) -> None:
    query = update.callback_query
    user = query.from_user
    await query.answer()
    
    bonus = 0
    if amount == 50:
        bonus = 5
    elif amount == 100:
        bonus = 15
    
    user_balances[user.id] = user_balances.get(user.id, 0) + amount + bonus
    log_transaction(user.id, amount + bonus, "deposit")
    
    deposit_text = (
        f"‚úÖ –°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±.\n"
    )
    
    if bonus > 0:
        deposit_text += f"üéÅ –ü–æ–ª—É—á–µ–Ω –±–æ–Ω—É—Å: {bonus} —Ä—É–±.\n"
    
    deposit_text += (
        f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_balances[user.id]} —Ä—É–±.\n"
    )
    
    keyboard = [
        [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data='choose_mode')],
        [InlineKeyboardButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data='check_balance')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
    ]
    
    await query.edit_message_text(
        deposit_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_balance(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user = query.from_user
    await query.answer()
    
    balance = user_balances.get(user.id, 0)
    games_today = DAILY_STATS.get(date.today(), {}).get(user.id, {}).get('games_played', 0) if date.today() in DAILY_STATS and user.id in DAILY_STATS[date.today()] else 0
    
    balance_text = (
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.\n"
        f"üìÖ –ò–≥—Ä —Å–µ–≥–æ–¥–Ω—è: {games_today}/{RESPONSIBLE_GAMING_LIMITS['daily_games_limit']}\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:\n"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –∏–≥—Ä –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –∫–∞–∂–¥–æ–º —Ä–µ–∂–∏–º–µ
    for mode, config in GAME_MODES.items():
        games_available = balance // config['entry_fee']
        balance_text += f"{config['name']}: {games_available} –∏–≥—Ä\n"
    
    balance_text += "\n–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    user_transactions = transactions.get(user.id, [])
    if user_transactions:
        for transaction in user_transactions[-5:]:
            sign = "+" if transaction['amount'] > 0 else ""
            balance_text += f"‚Ä¢ {transaction['date']}: {sign}{transaction['amount']} —Ä—É–±. ({transaction['type']})\n"
    else:
        balance_text += "–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞\n"
    
    keyboard = [
        [InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='make_deposit')],
        [InlineKeyboardButton("üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É", callback_data='choose_mode')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
    ]
    
    await query.edit_message_text(
        balance_text,
        reply_mup=InlineKeyboardMarkup(keyboard)
    )

async def invite_friends(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user = query.from_user
    await query.answer()
    
    referral_link = f"https://t.me/{(await context.bot.get_me()).username}?start=ref{user.id}"
    
    referral_text = (
        "üë• –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!\n\n"
        f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}\n\n"
        "–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞:\n"
        "‚Ä¢ –¢—ã –ø–æ–ª—É—á–∞–µ—à—å 5 —Ä—É–±.\n"
        "‚Ä¢ –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç +1 –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∏–≥—Ä—É\n"
        "‚Ä¢ –†–∞—Å—Ç–µ–º –≤–º–µ—Å—Ç–µ! üöÄ"
    )
    
    keyboard = [
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
    ]
    
    await query.edit_message_text(
        referral_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def start_live_location(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    instructions = (
        "üì° –ö–∞–∫ –≤–∫–ª—é—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏:\n\n"
        "1. –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é –≤–ª–æ–∂–µ–Ω–∏—è (–∫–Ω–æ–ø–∫–∞ üìé)\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è'\n"
        "3. –ù–∞–∂–º–∏—Ç–µ '–¢—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å –º–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é'\n"
        "4. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏\n"
        "5. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è'\n\n"
        "–Ø –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ!"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –Ø –≤–∫–ª—é—á–∏–ª —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é", callback_data='confirm_live')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_game')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(instructions, reply_markup=reply_markup)

async def confirm_live_location(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user = query.from_user
    await query.answer()
    
    # –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    if user.id in games:
        game = games[user.id]
        game.live_location_active = True
        response = "‚úÖ –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –ù–∞—á–∏–Ω–∞–π—Ç–µ –ø–æ–∏—Å–∫!"
        logger.info(f"Live location activated for user {user.id}")
    else:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∏–≥—Ä—É
        response = "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É, –æ—Ç–ø—Ä–∞–≤–∏–≤ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é!"
        await query.edit_message_text(response, reply_markup=get_main_menu_keyboard())
        return
    
    await query.edit_message_text(response, reply_markup=get_live_location_keyboard())

async def stop_live_location(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user = query.from_user
    await query.answer()
    
    if user.id in games:
        games[user.id].live_location_active = False
        response = "‚èπ –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
        logger.info(f"Live location stopped for user {user.id}")
    else:
        response = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã."
    
    await query.edit_message_text(response, reply_markup=get_game_keyboard())

async def handle_location(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    message = update.effective_message
    
    if not message or not message.location:
        logger.warning("Location update without valid message or location data")
        return
        
    location = message.location
    user_coords = (location.latitude, location.longitude)
    logger.info(f"Received location update from user {user.id}: {user_coords}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    selected_mode = context.user_data.get('selected_mode', 'standard')
    mode_config = GAME_MODES[selected_mode]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    context.user_data['last_location'] = user_coords
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π - –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
    if user.id not in games:
        game = GeoGame(user.id, location.latitude, location.longitude, selected_mode)
        games[user.id] = game
        action = "–Ω–∞—á–∞—Ç–∞"
    else:
        game = games[user.id]
        action = "–æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        game.last_update = datetime.now()
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—É
    yandex_map_url = (
        f"https://static-maps.yandex.ru/1.x/?ll={location.longitude},{location.latitude}"
        f"&size=650,450"
        f"&z=17"
        f"&l=map"
        f"&pt={location.longitude},{location.latitude},pm2rdl"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –≥–µ–æ–º–µ—Ç–æ–∫
    for i, spot in enumerate(game.geospots):
        lat, lon = spot['coords']
        color = "pm2gnl" if not spot['found'] else "pm2bll"
        yandex_map_url += f"~{lon},{lat},{color}{i+1}"
    
    response_text = (
        f"üéâ –ò–≥—Ä–∞ {action}! üéâ\n\n"
        f"–†–µ–∂–∏–º: {mode_config['name']}\n"
        f"–í —Ä–∞–¥–∏—É—Å–µ {SEARCH_RADIUS} –º –æ—Ç —Ç–µ–±—è —Å–ø—Ä—è—Ç–∞–Ω—ã {len(game.geospots)} –≥–µ–æ–º–µ—Ç–æ–∫.\n"
        f"–ò–∑ –Ω–∏—Ö {sum(1 for s in game.geospots if s['has_prize'])} —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∏–∑—ã!\n\n"
        f"<a href='{yandex_map_url}'>üó∫Ô∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É —Å –º–µ—Ç–∫–∞–º–∏</a>\n\n"
        "–ù–∞—á–∏–Ω–∞–π –ø–æ–∏—Å–∫! –Ø –±—É–¥—É —Å–æ–æ–±—â–∞—Ç—å, –∫–æ–≥–¥–∞ —Ç—ã –ø—Ä–∏–±–ª–∏–∑–∏—à—å—Å—è –∫ –º–µ—Ç–∫–µ."
    )
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=response_text,
        parse_mode='HTML',
        reply_markup=get_game_keyboard()
    )
    
    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è, —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    if game.live_location_active:
        logger.info("Checking proximity immediately after location update")
        await check_proximity_and_respond(update, context, user_coords, game)

async def handle_live_location(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    message = update.effective_message

    if not message or not message.location:
        logger.warning("Live location update without valid message or location data")
        return

    location = message.location
    user_coords = (location.latitude, location.longitude)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    context.user_data['last_location'] = user_coords
    
    logger.info(f"Received live location from user {user.id}: {user_coords}")

    if user.id not in games:
        logger.warning(f"No active game for user: {user.id}")
        return

    game = games[user.id]
    
    # –ê–ö–¢–ò–í–ò–†–£–ï–ú —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ live location!
    if not game.live_location_active:
        game.live_location_active = True
        logger.info(f"Auto-activated live location for user {user.id}")
    
    logger.info(f"Game found for user: {user.id}, live status: {game.live_location_active}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å –∫ –≥–µ–æ–º–µ—Ç–∫–∞–º
    logger.info("Checking proximity for live location...")
    await check_proximity_and_respond(update, context, user_coords, game)
    
    

async def check_proximity_and_respond(update: Update, context: CallbackContext, 
                                     user_coords: tuple, game: GeoGame) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–∏–∑–æ—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    proximity_results = game.check_proximity(user_coords)
    
    if not proximity_results:
        logger.info("No proximity results")
        return
    
    for result in proximity_results:
        spot = result['spot']
        distance = result['distance']
        progress = result['progress']
        
        spot_id = id(spot)
        last_progress = game.last_proximity_check.get(spot_id, 0)
        
        if abs(progress - last_progress) < 10 and not result['is_close']:
            logger.info(f"Progress for spot didn't change significantly ({progress} vs {last_progress})")
            continue
            
        game.last_proximity_check[spot_id] = progress
        
        if result['is_close']:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            if 'progress_message_id' in context.user_data:
                try:
                    await context.bot.delete_message(
                        chat_id=update.effective_chat.id,
                        message_id=context.user_data['progress_message_id']
                    )
                except Exception as e:
                    logger.error(f"Error deleting progress message: {e}")
                del context.user_data['progress_message_id']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –º–µ—Ç–∫–∞
            if spot['found']:
                continue
                
            spot['found'] = True
            game.found_spots.append(spot)
            
            prize = 0
            message_text = ""
            jackpot_won = False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∂–µ–∫–ø–æ—Ç
            if random.random() < JACKPOT_PROBABILITY:
                jackpot_won = True
                prize = JACKPOT_POOL
                JACKPOT_POOL = 100
                global_stats['jackpot_wins'] += 1
                logger.info(f"JACKPOT WON! User {game.user_id} won {prize} rubles!")
                user_balances[game.user_id] += prize
                log_transaction(game.user_id, prize, "jackpot_won")
                message_text = random.choice(JACKPOT_MESSAGES).format(prize=prize)
                message_text += f"\n\nüí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user_balances[game.user_id]} —Ä—É–±.!"
                message_text += "\n\nüéÜ –≠—Ç–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è —É–¥–∞—á–∞! üéÜ"

            elif spot['has_prize']:
                prize = spot['prize_amount']
                user_balances[game.user_id] += prize
                log_transaction(game.user_id, prize, "prize_won")
                message_text = random.choice(WIN_MESSAGES).format(prize=prize)
                message_text += f"\n\nüí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user_balances[game.user_id]} —Ä—É–±.!"
                message_text += "\n\nüéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if game.user_id in user_stats:
                    user_stats[game.user_id]['prizes_won'] = user_stats[game.user_id].get('prizes_won', 0) + 1
                    user_stats[game.user_id]['xp'] = user_stats[game.user_id].get('xp', 0) + XP_PER_WIN

            else:
                prize = 0
                message_text = random.choice(EMPTY_MESSAGES)
                near_miss = generate_near_miss()
                if near_miss:
                    message_text += f"\n\nüí´ {near_miss}"

            if jackpot_won and game.user_id in user_stats:
                user_stats[game.user_id]['prizes_won'] = user_stats[game.user_id].get('prizes_won', 0) + 1
                user_stats[game.user_id]['xp'] = user_stats[game.user_id].get('xp', 0) + XP_PER_WIN

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ö–æ–¥–∫–µ
            try:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=message_text,
                    parse_mode='HTML',
                    reply_markup=get_live_location_keyboard()
                )
                logger.info(f"Message sent to user {game.user_id}: {message_text}")
            except Exception as e:
                logger.error(f"Failed to send message to user {game.user_id}: {e}")

            if prize > 0:
                await check_achievements(update, context, game.user_id, "prize_won")
                
            # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Ö–æ–¥–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            break
            
        else:
            # –ö–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_bar = "üü©" * (progress // 10) + "‚¨úÔ∏è" * (10 - progress // 10)
            
            progress_text = (
                f"üîî –¢—ã –±–ª–∏–∑–∫–æ –∫ –≥–µ–æ–º–µ—Ç–∫–µ! üîî\n"
                f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.1f} –º\n"
                f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar} {progress}%"
            )
            
            if 'progress_message_id' in context.user_data:
                try:
                    await context.bot.edit_message_text(
                        chat_id=update.effective_chat.id,
                        message_id=context.user_data['progress_message_id'],
                        text=progress_text,
                        reply_markup=get_live_location_keyboard()
                    )
                except Exception as e:
                    logger.error(f"Error editing progress message: {e}")
                    msg = await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=progress_text,
                        reply_markup=get_live_location_keyboard()
                    )
                    context.user_data['progress_message_id'] = msg.message_id
            else:
                msg = await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=progress_text,
                    reply_markup=get_live_location_keyboard()
                )
                context.user_data['progress_message_id'] = msg.message_id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
    if len(game.found_spots) == len(game.geospots):
        prize_count = len([s for s in game.found_spots if s['has_prize']])
        total_prize = sum(s['prize_amount'] for s in game.found_spots if s['has_prize'])
        game_time = datetime.now() - game.start_time
        
        completion_text = (
            "üèÜ –¢–´ –ù–ê–®–ï–õ –í–°–ï –ì–ï–û–ú–ï–¢–ö–ò! üèÜ\n\n"
            f"–†–µ–∂–∏–º: {game.mode_config['name']}\n"
            f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {game_time.seconds // 60} –º–∏–Ω {game_time.seconds % 60} —Å–µ–∫\n"
            f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑—ã: {prize_count}\n"
            f"–°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞: {total_prize} —Ä—É–±.\n\n"
            "–•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?"
        )
        
        if 'progress_message_id' in context.user_data:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data['progress_message_id']
                )
            except Exception as e:
                logger.error(f"Error deleting progress message: {e}")
            del context.user_data['progress_message_id']
        
        user_id = game.user_id
        del games[user_id]
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=completion_text,
            reply_markup=get_main_menu_keyboard()
        )
        
        
        
async def handle_text(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    
    if user.id in games:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π:",
            reply_markup=get_game_keyboard()
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–µ–æ–º–µ—Ç–æ–∫. –ù–∞—á–Ω–∏ –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é /start",
            reply_markup=get_main_menu_keyboard()
        )
        
# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========
# ... –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...

async def web_app_data(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App"""
    try:
        data = json.loads(update.effective_message.web_app_data.data)
        user = update.effective_user
        action = data.get('action')
        
        if action == 'start_game':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –∏–∑ Web App
            game_mode = data.get('mode', 'standard')
            lat = data.get('lat')
            lon = data.get('lon')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            mode_config = GAME_MODES[game_mode]
            if user.id not in user_balances or user_balances[user.id] < mode_config['entry_fee']:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã –≤ —Ä–µ–∂–∏–º–µ {mode_config['name']}",
                    reply_markup=get_main_menu_keyboard()
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
            game = GeoGame(user.id, lat, lon, game_mode)
            games[user.id] = game
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Web App
            geospots_data = []
            for i, spot in enumerate(game.geospots):
                geospots_data.append({
                    'id': i,
                    'lat': spot['coords'][0],
                    'lon': spot['coords'][1],
                    'has_prize': spot['has_prize'],
                    'prize_amount': spot['prize_amount']
                })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ Web App
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=json.dumps({
                    'status': 'success',
                    'game_data': {
                        'geospots': geospots_data,
                        'center': [lat, lon],
                        'radius': SEARCH_RADIUS
                    }
                }),
                parse_mode='HTML'
            )
            
        elif action == 'found_spot':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –≥–µ–æ–º–µ—Ç–∫–∏
            spot_id = data.get('spot_id')
            if user.id in games:
                game = games[user.id]
                if 0 <= spot_id < len(game.geospots) and not game.geospots[spot_id]['found']:
                    game.geospots[spot_id]['found'] = True
                    game.found_spots.append(game.geospots[spot_id])
                    
                    # –ù–∞—á–∏—Å–ª—è–µ–º –ø—Ä–∏–∑, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if game.geospots[spot_id]['has_prize']:
                        prize = game.geospots[spot_id]['prize_amount']
                        user_balances[user.id] += prize
                        log_transaction(user.id, prize, "prize_won")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∏–≥—Ä—ã—à–µ
                        await context.bot.send_message(
                            chat_id=update.effective_chat.id,
                            text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ –≥–µ–æ–º–µ—Ç–∫—É —Å –ø—Ä–∏–∑–æ–º {prize} —Ä—É–±.!",
                            reply_markup=get_main_menu_keyboard()
                        )
    
    except Exception as e:
        logger.error(f"Error processing web app data: {e}")
# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...

async def user_stats(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user = query.from_user
    await query.answer()
    
    if user.id not in games:
        stats_text = "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã. –ù–∞—á–Ω–∏ –Ω–æ–≤—É—é –∏–≥—Ä—É!"
        await query.edit_message_text(stats_text, reply_markup=get_back_keyboard())
        return
    
    game = games[user.id]
    found = len(game.found_spots)
    total = len(game.geospots)
    time_elapsed = datetime.now() - game.start_time
    prize_count = len([s for s in game.found_spots if s['has_prize']])
    total_prize = sum(s['prize_amount'] for s in game.found_spots if s['has_prize'])
    
    stats_text = (
        "üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–†–µ–∂–∏–º: {game.mode_config['name']}\n"
        f"üîç –ù–∞–π–¥–µ–Ω–æ –≥–µ–æ–º–µ—Ç–æ–∫: {found}/{total}\n"
        f"üéÅ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏–∑–æ–≤: {prize_count}\n"
        f"üí∞ –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞: {total_prize} —Ä—É–±.\n"
        f"‚è± –í—Ä–µ–º—è –∏–≥—Ä—ã: {time_elapsed.seconds // 60} –º–∏–Ω {time_elapsed.seconds % 60} —Å–µ–∫\n\n"
        f"üìç –¶–µ–Ω—Ç—Ä –ø–æ–∏—Å–∫–∞: {game.center[0]:.5f}, {game.center[1]:.5f}"
    )
    
    await query.edit_message_text(stats_text, reply_markup=get_back_keyboard())

async def cancel_game(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user = query.from_user
    await query.answer()
    
    if user.id in games:
        game = games[user.id]
        found = len(game.found_spots)
        total = len(game.geospots)
        prize_count = len([s for s in game.found_spots if s['has_prize']])
        total_prize = sum(s['prize_amount'] for s in game.found_spots if s['has_prize'])
        
        del games[user.id]
        response = (
            "‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ!\n\n"
            f"–†–µ–∂–∏–º: {game.mode_config['name']}\n"
            f"üîç –¢—ã –Ω–∞—à–µ–ª {found} –∏–∑ {total} –≥–µ–æ–º–µ—Ç–æ–∫\n"
            f"üéÅ –ü—Ä–∏–∑–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {prize_count}\n"
            f"üí∞ –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–∞: {total_prize} —Ä—É–±.\n\n"
            "–ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!"
        )
        logger.info(f"Game canceled for user {user.id}")
    else:
        response = "–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã."
    
    await query.edit_message_text(response, reply_markup=get_main_menu_keyboard())


async def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    data = query.data
    
    if data == 'choose_mode':
        await choose_mode(update, context)
    elif data.startswith('mode_'):
        mode = data.split('_')[1]
        await start_game(update, context, mode)
    elif data == 'show_rules':
        await rules(update, context)
    elif data == 'user_stats':
        await user_stats(update, context)
    elif data == 'make_deposit':
        await handle_deposit(update, context)
    elif data == 'check_balance':
        await handle_balance(update, context)
    elif data == 'invite_friends':
        await invite_friends(update, context)
    elif data == 'deposit_15':
        await process_deposit(update, context, 15)
    elif data == 'deposit_50':
        await process_deposit(update, context, 50)
    elif data == 'deposit_100':
        await process_deposit(update, context, 100)
    elif data == 'cancel_game':
        await cancel_game(update, context)
    elif data == 'main_menu':
        await main_menu(update, context)
    elif data == 'send_location':
        await send_location_prompt(update, context)
    elif data == 'start_live_location':
        await start_live_location(update, context)
    elif data == 'stop_live_location':
        await stop_live_location(update, context)
    elif data == 'confirm_live':
        await confirm_live_location(update, context)
    elif data == 'back_to_game':
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –∏–≥—Ä–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
        if 'selected_mode' in context.user_data:
            mode = context.user_data['selected_mode']
            await start_game(update, context, mode)
        else:
            await choose_mode(update, context)

async def main_menu(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())

async def send_location_prompt(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ç–µ–∫—É—â—É—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é Telegram:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_game')]
        ])
    )

async def admin_stats(update: Update, context: CallbackContext) -> None:
    if str(update.effective_user.id) != ADMIN_ID:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        )
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –∫–∞–∑–∏–Ω–æ
    if global_stats['total_deposits'] > 0:
        house_edge_actual = (global_stats['total_deposits'] - global_stats['total_prizes']) / global_stats['total_deposits']
    else:
        house_edge_actual = 0
    
    stats_text = (
        f"üìä –ê–¥–º–∏–Ω-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ GeoHunter:\n\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä: {len(games)}\n"
        f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {len(global_stats['active_players'])}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∏–≥—Ä: {global_stats['total_games']}\n"
        f"‚Ä¢ –û–±—â–∏–µ –¥–µ–ø–æ–∑–∏—Ç—ã: {global_stats['total_deposits']} —Ä—É–±.\n"
        f"‚Ä¢ –û–±—â–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏: {global_stats['total_prizes']} —Ä—É–±.\n"
        f"‚Ä¢ –î–æ—Ö–æ–¥: {global_stats['total_revenue']} —Ä—É–±.\n"
        f"‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ: {house_edge_actual:.2%}\n"
        f"‚Ä¢ –†–∞–∑–º–µ—Ä –¥–∂–µ–∫–ø–æ—Ç–∞: {JACKPOT_POOL} —Ä—É–±.\n"
        f"‚Ä¢ –í—ã–∏–≥—Ä—ã—à–µ–π –¥–∂–µ–∫–ø–æ—Ç–∞: {global_stats['jackpot_wins']}\n\n"
        f"–¢–µ–∫—É—â–∏–µ –∏–≥—Ä—ã:\n"
    )
    
    for user_id, game in games.items():
        found = len(game.found_spots)
        total = len(game.geospots)
        time_elapsed = datetime.now() - game.start_time
        live_status = "‚úÖ" if game.live_location_active else "‚ùå"
        stats_text += (
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
            f"üéÆ –†–µ–∂–∏–º: {game.mode_config['name']}\n"
            f"üîç –ù–∞–π–¥–µ–Ω–æ: {found}/{total}\n"
            f"‚è± –í—Ä–µ–º—è: {time_elapsed.seconds // 60} –º–∏–Ω\n"
            f"üìç –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è: {live_status}\n"
            f"üìç –¶–µ–Ω—Ç—Ä: {game.center[0]:.5f}, {game.center[1]:.5f}\n\n"
        )
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=stats_text
    )

async def force_check(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    
    if user.id not in games:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã"
        )
        return
        
    game = games[user.id]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    if not hasattr(context, 'user_data') or 'last_location' not in context.user_data:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏"
        )
        return
        
    user_coords = context.user_data['last_location']
    logger.info(f"Force check for user at {user_coords}")
    
    await check_proximity_and_respond(update, context, user_coords, game)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
    )

async def check_jackpot(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    
    jackpot_text = (
        f"üé∞ –¢–ï–ö–£–©–ò–ô –î–ñ–ï–ö–ü–û–¢: {JACKPOT_POOL} —Ä—É–±.! üé∞\n\n"
        f"–®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞: {JACKPOT_PROBABILITY*100}%\n"
        "–î–∂–µ–∫–ø–æ—Ç —Ä–∞—Å—Ç–µ—Ç —Å –∫–∞–∂–¥–æ–π –∏–≥—Ä–æ–π!\n\n"
        "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –¥–∂–µ–∫–ø–æ—Ç–∞\n"
        "–ø—Ä–æ—Å—Ç–æ –∏–≥—Ä–∞–π—Ç–µ –≤ –ª—é–±–æ–º —Ä–µ–∂–∏–º–µ!"
    )
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=jackpot_text
    )

async def handle_withdraw(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user = query.from_user
    await query.answer()
    
    balance = user_balances.get(user.id, 0)
    
    if balance < 50:
        withdraw_text = (
            f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 50 —Ä—É–±.\n"
            f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.\n\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã –Ω–∞–∫–æ–ø–∏—Ç—å –Ω—É–∂–Ω—É—é —Å—É–º–º—É!"
        )
        
        await query.edit_message_text(withdraw_text, reply_markup=get_back_keyboard())
        return
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    # –î–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    
    user_balances[user.id] = 0
    log_transaction(user.id, -balance, "withdrawal")
    
    withdraw_text = (
        f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {balance} —Ä—É–±. –ø—Ä–∏–Ω—è—Ç!\n\n"
        "–û–±—ã—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 24 —á–∞—Å–æ–≤.\n"
        "–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ\n"
        "—Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )
    
    await query.edit_message_text(withdraw_text, reply_markup=get_main_menu_keyboard())

async def daily_bonus(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if user.id not in user_stats:
        user_stats[user.id] = {'level': 1, 'xp': 0, 'games_played': 0, 'prizes_won': 0, 'last_bonus_date': None}
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if user.id not in user_balances:
        user_balances[user.id] = 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è
    today = date.today()
    last_bonus_date = user_stats[user.id].get('last_bonus_date')
    
    if last_bonus_date == today:
        bonus_text = "‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞!"
    else:
        # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å
        bonus_amount = random.randint(3, 10)
        user_balances[user.id] += bonus_amount
        log_transaction(user.id, bonus_amount, "daily_bonus")
        
        user_stats[user.id]['last_bonus_date'] = today
        
        bonus_text = (
            f"üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: {bonus_amount} —Ä—É–±.! üéÅ\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balances[user.id]} —Ä—É–±.\n"
            "–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –±–æ–Ω—É—Å–æ–º!"
        )
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=bonus_text
    )

def main() -> None:
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", admin_stats))
    application.add_handler(CommandHandler("check", force_check))
    application.add_handler(CommandHandler("jackpot", check_jackpot))
    application.add_handler(CommandHandler("withdraw", handle_withdraw))
    application.add_handler(CommandHandler("bonus", daily_bonus))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
    application.add_handler(MessageHandler(filters.LOCATION, handle_location))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∏–≤–æ–π –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
    application.add_handler(MessageHandler(filters.LOCATION, handle_live_location))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App - –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ß–ö–£
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, web_app_data))
    

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    application.run_polling()

if __name__ == '__main__':
    main()