# GeoHunter.py
import requests
import time
from typing import Dict, Any
import asyncio
import sqlite3
import os
import logging
import json
from dotenv import load_dotenv
from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters, JobQueue

from database import Database

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
WEB_APP_URL = os.getenv('WEB_APP_URL', 'https://sevryuk88.github.io/GeoHunter-/geohtml.html')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# CryptoBot API configuration
CRYPTO_BOT_TOKEN = os.getenv('CRYPTO_BOT_TOKEN')
CRYPTO_BOT_TESTNET = os.getenv('CRYPTO_BOT_TESTNET', 'True').lower() == 'true'
CRYPTO_BOT_API_URL = "https://testnet-pay.crypt.bot/" if CRYPTO_BOT_TESTNET else "https://pay.crypt.bot/"

def create_crypto_invoice(user_id: int, amount: float, asset: str = "USDT") -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –≤ CryptoBot"""
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN,
        "Content-Type": "application/json"
    }
    
    payload = {
        "asset": asset,
        "amount": str(amount),
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
        "paid_btn_name": "open",
        "paid_btn_url": f"https://t.me/geohunter_bot?start=payment_success_{user_id}",
        "payload": json.dumps({"user_id": user_id, "type": "deposit"}),
        "allow_comments": False,
        "allow_anonymous": False
    }
    
    try:
        response = requests.post(
            f"{CRYPTO_BOT_API_URL}api/invoice",
            headers=headers,
            json=payload
        )
        response.raise_for_status()
        return response.json().get("result", {})
    except Exception as e:
        logger.error(f"Error creating CryptoBot invoice: {e}")
        return {}

def check_crypto_invoice(invoice_id: int) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω–≤–æ–π—Å–∞ –≤ CryptoBot"""
    headers = {
        "Crypto-Pay-API-Token": CRYPTO_BOT_TOKEN
    }
    
    try:
        response = requests.get(
            f"{CRYPTO_BOT_API_URL}api/invoice/{invoice_id}",
            headers=headers
        )
        response.raise_for_status()
        return response.json().get("result", {})
    except Exception as e:
        logger.error(f"Error checking CryptoBot invoice: {e}")
        return {}

# –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é process_crypto_payment –≤ GeoHunter.py

async def process_crypto_payment(context: CallbackContext) -> None:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ CryptoBot"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('geohunter.db')
        cursor = conn.cursor()
        cursor.execute('SELECT * FROM transactions WHERE status = "pending" AND provider = "cryptobot"')
        pending_transactions = cursor.fetchall()
        conn.close()
        
        for transaction in pending_transactions:
            transaction_id, user_id, amount, transaction_type, status, provider, provider_transaction_id, created_at = transaction
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞
            invoice_info = check_crypto_invoice(provider_transaction_id)
            
            if invoice_info.get('status') == 'paid':
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                db.update_balance(user_id, amount)
                db.add_transaction(user_id, amount, "deposit", "completed", "cryptobot", provider_transaction_id)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ ${amount} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${db.get_balance(user_id)}"
                    )
                except Exception as e:
                    logger.error(f"Error sending payment confirmation: {e}")
    except Exception as e:
        logger.error(f"Error in process_crypto_payment: {e}")
                

async def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.create_user(user)
    
    welcome_text = (
        "üåü Welcome to GeoHunter! üåü\n\n"
        "I'll help you find hidden treasures around you!\n\n"
        "Click the button below to launch the game interface:"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º initData –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
    web_app_url = f"{WEB_APP_URL}?user_id={user.id}"
    
    keyboard = [
        [InlineKeyboardButton("üéÆ Launch GeoHunter", web_app=WebAppInfo(url=web_app_url))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def handle_web_app_data(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        data = json.loads(update.message.web_app_data.data)
        user_id = update.effective_user.id
        
        logger.info(f"Received data from web app: {data}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if data.get('type') == 'game_result':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
            game_id = db.create_game(user_id, data['mode'], data['entry_fee'])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≥–µ–æ—Ç–æ—á–∫–∏
            for geospot in data.get('found_geospots', []):
                db.add_found_geospot(
                    game_id, 
                    user_id, 
                    geospot['has_prize'], 
                    geospot.get('prize_amount', 0)
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            prize_won = data.get('prize_won', 0)
            if prize_won > 0:
                db.update_balance(user_id, prize_won)
                db.update_game_result(game_id, prize_won)
                
                await update.message.reply_text(
                    f"üéâ Congratulations! You won ${prize_won}!\n"
                    f"Your current balance: ${db.get_balance(user_id)}"
                )
            else:
                db.update_game_result(game_id, 0)
                await update.message.reply_text(
                    "Thanks for playing! Better luck next time!\n"
                    f"Your current balance: ${db.get_balance(user_id)}"
                )
                
        elif data.get('type') == 'payment_request':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞
            amount = data.get('amount', 0)
            payment_url = generate_payment_url(user_id, amount)
            
            await update.message.reply_text(
                f"Please complete your payment of ${amount}:\n{payment_url}"
            )
            
    except Exception as e:
        logger.error(f"Error processing web app data: {e}")
        await update.message.reply_text("Sorry, there was an error processing your request.")
        
        
async def admin_stats(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if str(user_id) not in os.getenv('ADMIN_IDS', '').split(','):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('geohunter.db')
        cursor = conn.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute('SELECT COUNT(*) FROM users')
        total_users = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM games')
        total_games = cursor.fetchone()[0]
        
        cursor.execute('SELECT SUM(prize_won) FROM games')
        total_prizes = cursor.fetchone()[0] or 0
        
        cursor.execute('SELECT SUM(amount) FROM transactions WHERE type = "deposit" AND status = "completed"')
        total_deposits = cursor.fetchone()[0] or 0
        
        conn.close()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        stats_message = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üéÆ –í—Å–µ–≥–æ –∏–≥—Ä: {total_games}\n"
            f"üèÜ –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–µ–π: ${total_prizes}\n"
            f"üí∞ –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: ${total_deposits}\n"
            f"üíµ –î–æ—Ö–æ–¥: ${total_deposits - total_prizes}"
        )
        
        await update.message.reply_text(stats_message)
        
    except Exception as e:
        logger.error(f"Error getting admin stats: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        
        
        
async def admin_broadcast(update: Update, context: CallbackContext) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if str(user_id) not in os.getenv('ADMIN_IDS', '').split(','):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: /broadcast –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    message = ' '.join(context.args)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    conn = sqlite3.connect('geohunter.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users')
    users = cursor.fetchall()
    conn.close()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    success = 0
    fail = 0
    
    for user in users:
        try:
            await context.bot.send_message(chat_id=user[0], text=message)
            success += 1
        except Exception as e:
            logger.error(f"Error sending message to {user[0]}: {e}")
            fail += 1
    
    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {fail}"
    )

def generate_payment_url(user_id, amount):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CryptoBot"""
    invoice = create_crypto_invoice(user_id, amount)
    
    if invoice and 'pay_url' in invoice:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.add_transaction(user_id, amount, "deposit", "pending", "cryptobot", invoice.get('invoice_id'))
        return invoice['pay_url']
    
    return "https://t.me/CryptoBot?start=invoice_error"
    

async def handle_successful_payment(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    pass

# –í —Ñ—É–Ω–∫—Ü–∏–∏ main() –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è application
def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    application.add_handler(CommandHandler("stats", admin_stats))
    application.add_handler(CommandHandler("broadcast", admin_broadcast))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    job_queue = application.job_queue
    if job_queue:
        job_queue.run_repeating(
            lambda context: asyncio.create_task(process_crypto_payment(context)),
            interval=300,
            first=10
        )
    
    logger.info("Bot started with database and web app support")
    application.run_polling()

if __name__ == '__main__':
    main()